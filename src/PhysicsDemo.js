// Generated by CoffeeScript 1.6.1
(function() {
  var PhysicsDemo,
    _this = this;

  PhysicsDemo = (function() {

    PhysicsDemo.prototype.AVOID_MOUSE_STRENGTH = 25000;

    PhysicsDemo.prototype.engine = new Physics();

    PhysicsDemo.prototype.sketch = null;

    PhysicsDemo.prototype.min_mass = 5;

    PhysicsDemo.prototype.max_mass = 25;

    PhysicsDemo.prototype.destroy = false;

    PhysicsDemo.prototype.renderer = null;

    function PhysicsDemo(paths) {
      var _this = this;
      this.paths = paths;
      this.onmousemove = function() {
        return PhysicsDemo.prototype.onmousemove.apply(_this, arguments);
      };
      this.draw = function() {
        return PhysicsDemo.prototype.draw.apply(_this, arguments);
      };
      this.onresize = function() {
        return PhysicsDemo.prototype.onresize.apply(_this, arguments);
      };
      this.engine.integrator = new Verlet();
      this.avoidMouse = new Attraction();
      this.createSketch();
      this.createParticles();
    }

    PhysicsDemo.prototype.destroySketch = function() {
      this.sketch.stop();
      this.sketch.clear();
      return this.sketch.destroy();
    };

    PhysicsDemo.prototype.destroyParticles = function() {
      return this.engine.destroy();
    };

    PhysicsDemo.prototype.setupGUI = function() {
      return this.gui.add(this, 'AVOID_MOUSE_STRENGTH', 5000, 15000);
    };

    PhysicsDemo.prototype.onresize = function() {
      this.sketch.height = window.innerHeight;
      return this.sketch.width = window.innerWidth;
    };

    PhysicsDemo.prototype.createSketch = function() {
      this.sketch = Sketch.create({
        container: document.getElementById("dhaakon-sketch-container")
      });
      this.sketch.draw = this.draw;
      this.sketch.mousemove = this.onmousemove;
      return this.sketch.resize = this.onresize;
    };

    PhysicsDemo.prototype.createParticles = function() {
      var count, particle, path, pathData, position, pull, _i, _j, _len, _len1, _ref, _ref1;
      count = 0;
      _ref = this.paths;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        _ref1 = path.pathData;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          pathData = _ref1[_j];
          particle = new Particle(max(this.min_mass, random(this.max_mass)));
          position = new Vector(random(this.sketch.width), random(this.sketch.height));
          this.count++;
          particle.setRadius(random(8));
          particle.moveTo(position);
          pull = new Attraction();
          pull.target.x = pathData.x + ((this.sketch.width / 2) - 420);
          pull.target.y = pathData.y + ((this.sketch.height / 2) - 140);
          pull.strength = 5000;
          particle.behaviours.push(this.avoidMouse, pull);
          this.engine.particles.push(particle);
        }
      }
      this.avoidMouse.setRadius(100);
      return this.avoidMouse.strength = -this.AVOID_MOUSE_STRENGTH;
    };

    PhysicsDemo.prototype.draw = function() {
      var particle, _i, _len, _ref, _results;
      this.engine.step();
      this.avoidMouse.strength = -this.AVOID_MOUSE_STRENGTH;
      _ref = this.engine.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        if (this.destroy) {
          if (particle.radius > 0) {
            particle.radius -= 0.18;
          }
        }
        if (particle.radius > 0) {
          this.sketch.beginPath();
          this.sketch.arc(particle.pos.x, particle.pos.y, particle.radius, 0, Math.PI * 2);
          _results.push(this.sketch.fill());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PhysicsDemo.prototype.onmousemove = function() {
      this.avoidMouse.target.x = this.sketch.mouse.x;
      return this.avoidMouse.target.y = this.sketch.mouse.y;
    };

    PhysicsDemo.prototype.getSketch = function() {
      return this.sketch;
    };

    return PhysicsDemo;

  })();

}).call(this);
